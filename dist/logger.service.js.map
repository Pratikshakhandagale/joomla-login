{"version":3,"file":"logger.service.js","sourceRoot":"","sources":["../src/app/logger.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAG/D,OAAO,uBAAuB,CAAC;AAG/B;IAEI,uBAAmB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAC/B,IAAI,CAAC,WAAW,GAAG;YACf,OAAO,EAAE,IAAI,WAAW,CAAC;gBACrB,cAAc,EAAE,mCAAmC;aACtD,CAAC;SACL,CAAA;QACD,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAED,kCAAU,GAAV;QAAA,iBASC;QARG,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;YACtB,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,UAAA,IAAI;gBACvE,OAAO,CAAC,IAAI,CAAC,CAAC;gBACd,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;YAC1B,CAAC,EAAE,UAAA,GAAG;gBACF,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gCAAQ,GAAR,UAAS,OAAgB,EAAE,IAAU;QAArC,iBAWC;QAVG,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;YACtB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,KAAI,CAAC,WAAW,CAAC;iBAC1C,SAAS,CACV,UAAA,IAAI;gBACA,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,EACD,UAAA,GAAG;gBACC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAA;QACV,CAAC,CAAC,CAAC;IACP,CAAC;IAjCQ,aAAa;QAFzB,UAAU,EAAE;yCAIgB,UAAU;OAF1B,aAAa,CAqCzB;IAAD,oBAAC;CAAA,AArCD,IAqCC;SArCY,aAAa","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n//import { IResponse } from '../../../node_modules/techjoomla/interfaces/apiresponse'\nimport { Observable } from 'rxjs';\nimport 'rxjs/add/operator/map';\n@Injectable()\n\nexport class LoggerService {\n    httpOptions: any;\n    constructor(public http: HttpClient) {\n        this.httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/x-www-form-urlencoded'\n            })\n        }\n        this.getConfigs();\n    }\n\n    getConfigs() {\n        return new Promise(resolve => {\n            this.http.get('assets/config/config.json', this.httpOptions).subscribe(data => {\n                resolve(data);\n                console.log({ data });\n            }, err => {\n                console.log(err);\n            });\n        });\n    }\n\n    postCall(posturl : string, data : any) {\n        return new Promise(resolve => {\n            this.http.post(posturl, data, this.httpOptions)\n                .subscribe(\n                data => {\n                    resolve(data);\n                },\n                err => {\n                    console.log(err.message);\n                })\n        });\n    }\n\n\n\n}"]}